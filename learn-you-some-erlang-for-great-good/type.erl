%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% 6. Types(型)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% 静的型付けと動的型付け
%% 「良いコンパイラによる静的型付けシステムは, 起こりえる型絡みエラーを実行前に補足できる」...とか.
%% Erlangが動的型付けを選択したのは単に開発者の経験が多かったからだそうな.

%% Erlangの方針
%% 「エラーはどうせ起きるんだから, エラーが起きた後確実に回復する言語にしようぜ」

%% 弱い型付け言語は暗黙の型変換を行う(JSとかPHP)けど, Erlangはあそこまでゆるふわではない.
%% Erlangの型変換は明示的. hoge_to_fugaという膨大な関数ができちゃうのはご愛嬌.
%     11> erlang:list_to_integer("54").
%     54
%% あと型を明示的にチェックする関数も用意されてる.
%     12> erlang:is_atom("lll").
%     false
%     13> erlang:is_atom('lll').
%     true
%% Haskellとかだと関数の引数/返り値の型がかっちり決まってるけど,
%% Erlangはこういった関数を使ってマッチさせないといけない.

%% typeofとか.classのような関数はないのか? という疑問に対し著者はこう答える.
%% > Erlangは正しい事象に対してのプログラミングです。 あなたが起こると期待することに対してのみプログラミングすればよいのです。 それ以外のものは直ちにエラーの原因となります。
%% > これは気が狂ってるように思えますが、第8章（エラー管理）での説明がそれをすっきりすること願います。 それまでは私を信用していてください。

%% 余談, Erlangはタプルとリストがあればまあ大体のデータ構造は表現できる, という方針でもある.

%%% 6.4. Erlangにおける型の歴史 %%%
%% Erlangに型システムを構築しようとする試みはあった. Haskellのモナド理論貢献者もチャレンジ.
%% 参考論文豊富だしこのへん読み物として面白い. Erlang自体の勉強からは少し外れるのでメモはとらないが.

